#!/usr/bin/env python3

'''Calculate flow cumulants v_n{k} for a batch of events.'''

import argparse
import sys

import numpy as np
import numexpr as ne


def phi_generator(column):
    """
    Read phi values as event-by-event chunks from stdin.

    Events are assumed to separated by blank lines or comments.

    Parameters
    ----------
    column : integer
        Index of column containing phi values, counted from zero.

    Yields
    ------
    phi : array of floats

    """

    phi = []

    for l in sys.stdin.buffer:
        s = l.split()
        if not s or s[0][0] == b'#':
            if phi:
                yield np.array(phi, dtype=np.float64)
                phi.clear()
        else:
            phi.append(s[column])

    if phi:
        yield np.array(phi, dtype=np.float64)


def Q_cumulant(n, phi):
    """
    Calculate Q-cumulant for an event.

        Q_n(phi) = sum exp(i*n*phi)

    Parameters
    ----------
    n : integer
        Order of cumulant.
    phi : array
        Phi values for the event.

    Returns
    -------
    Q_n : complex

    """

    return ne.evaluate('sum(exp(1j*n*phi))')


def cumulant_generator(the_n, k_max, Q, M, error=False):
    """
    Calculate cumulants v_n{k} for a batch of events.

    Parameters
    ----------
    the_n : list of ints
        Flow harmonics to calculate.
    k_max : int
        Maximum cumulant order.
    Q : dict of arrays
        Q[n] should contain an array of Q_n for each event.
    M : array of multiplicities
        For each event.

    Yields
    -------
    v_n{k} : float
        In the order v2{2}, v2{4}, ..., v3{2}, v3{4}, ...
    error(v_n{2}) : float, if error == True
        Statistical error of v_n{2}.

    """

    # the following naming conventions are used
    # corrK = <K> = K-particle azimuthal correlation
    # cnK = c_n{K} = K-order cumulant for nth-order anisotropy
    # vnK = v_n{K}
    # Calculations are vectorized using numexpr, which also avoids
    # memory-consuming temporary arrays which are typically found in numpy.
    # For each anisotropy order n, cumulants are calculated in ascending order.
    # This allows higher-order cumulants to reuse results from lower order.
    for n in the_n:
        # v_n{2}
        Qn = Q[n]
        Qnsq = ne.evaluate('real(Qn*conj(Qn))')
        corr2_numerator = ne.evaluate('sum(Qnsq - M)')
        corr2_denominator = ne.evaluate('sum(M*(M-1))')
        corr2 = corr2_numerator / corr2_denominator
        cn2 = corr2
        vn2 = abs(cn2)**.5
        if cn2 < 0:
            vn2 *= -1
        yield vn2

        if error:
            sum_w2 = corr2_denominator
            sum_w2sq = ne.evaluate('sum(M*M*(M-1)*(M-1))')
            corr2_variance = ne.evaluate('sum(M*(M-1) \
                                         * ((Qnsq-M)/(M*(M-1)) - corr2)**2)') \
                / (sum_w2 - sum_w2sq/sum_w2)
            vn2_error = .5*abs(corr2)**(-.5) \
                * (sum_w2sq**.5/sum_w2) \
                * corr2_variance**.5
            yield vn2_error

        if k_max == 2:
            continue

        # v_n{4}
        Q2n = Q[2*n]
        Qn4 = ne.evaluate('Qnsq*Qnsq')
        Q2nsq = ne.evaluate('real(Q2n*conj(Q2n))')
        corr4_numerator = ne.evaluate(
            '''sum(
               Qn4 + Q2nsq
               - 2*real(Q2n*conj(Qn)*conj(Qn))
               - 4*(M-2)*Qnsq + 2*M*(M-3)
            )'''
        )
        corr4_denominator = ne.evaluate('sum(M*(M-1)*(M-2)*(M-3))')
        corr4 = corr4_numerator / corr4_denominator
        cn4 = corr4 - 2.*corr2*corr2
        vn4 = abs(cn4)**.25
        if cn4 > 0:
            vn4 *= -1
        yield vn4

        if k_max == 4:
            continue

        # v_n{6}
        Q3n = Q[3*n]
        corr6_numerator = ne.evaluate(
            '''sum(
                Qn4*Qnsq
                + 9*Q2nsq*Qnsq
                - 6*real(Q2n*Qn*conj(Qn)*conj(Qn)*conj(Qn))
                + 4*real(Q3n*conj(Qn)*conj(Qn)*conj(Qn))
                - 12*real(Q3n*conj(Q2n)*conj(Qn))
                + 18*(M-4)*real(Q2n*conj(Qn)*conj(Qn))
                + 4*real(Q3n*conj(Q3n))
                - 9*(M-4)*(Qn4 + Q2nsq)
                + 18*(M-2)*(M-5)*Qnsq
                - 6*M*(M-4)*(M-5)
            )'''
        )
        corr6_denominator = ne.evaluate('sum(M*(M-1)*(M-2)*(M-3)*(M-4)*(M-5))')
        corr6 = corr6_numerator / corr6_denominator
        cn6 = corr6 - 9*corr2*corr4 + 12*corr2*corr2*corr2
        vn6 = abs(.25*cn6)**(1/6)
        if cn6 < 0:
            vn6 *= -1
        yield vn6


def main():
    parser = argparse.ArgumentParser(
        description='''Calculate flow cumulants v_n{k}.  Reads phi (azimuthal
        angles) from stdin.  No particle filtering is done (e.g. charged
        particles, pT cut).  Any line that is blank or starts with a comment
        (#) is an event separator.  Outputs cumulants in the order
        v2{2}, v2{4}, ..., v3{2}, v3{4}, ...''',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument('-c', '--column',
                        type=int, default=2,
                        help='Column number containing phi values, \
                        counted from 0.'
                        )
    parser.add_argument('-n', '--max-vn',
                        type=int, choices=range(2, 10), default=4,
                        metavar='(2-9)',
                        help='Maximum flow harmonic.'
                        )
    parser.add_argument('-k', '--max-cumulant',
                        type=int, choices=(2, 4, 6), default=4,
                        help='Maximum cumulant.'
                        )
    parser.add_argument('-e', '--error', action='store_true',
                        help='''Calculate statistical errors for v_n{2}.
                        Additional output columns will be inserted after
                        v_n{2}.'''
                        )
    parser.add_argument('--etarange', type=float,
                        help='''Pseudorapidity width.  If given, the average
                        multiplicity <dN/deta> = mean(M)/(etarange) will be
                        prepended to the cumulants.'''
                        )

    args = parser.parse_args()

    the_n = range(2, args.max_vn+1)
    the_k = range(2, args.max_cumulant+1, 2)

    # determine necessary Q-cumulants
    # flow cumulant v_n{k} requires the Q-cumulants n, 2n, ..., (k/2)n
    Qn_to_calculate = frozenset(n*int(k/2) for n in the_n for k in the_k)

    # initialize containers to hold multiplicity and Q_n vectors
    M = []
    Q = {n: [] for n in Qn_to_calculate}  # using dict as a sparse list

    # loop over events
    # append multiplicity and Q_n to respective lists
    for phi in phi_generator(args.column):
        M.append(phi.size)
        for n, _Qn in Q.items():
            _Qn.append(Q_cumulant(n, phi))

    # convert to numpy arrays
    # store multiplicities as floats, not ints
    # otherwise powers of mult. could overflow
    # anyway, mult. is cast to floating point when calculating cumulants
    M = np.array(M, dtype=np.float64)
    for n, _Qn in Q.items():
        Q[n] = np.array(_Qn, dtype=np.complex128)

    #
    # output
    #

    # dN/deta
    if args.etarange is not None:
        print(M.mean()/args.etarange, end=' ')
    # cumulants
    print(
        *cumulant_generator(the_n, args.max_cumulant, Q, M, error=args.error)
    )


if __name__ == "__main__":
    main()
